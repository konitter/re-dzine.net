<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>REFLECTDESIGN</title>
  <id>http://re-dzine.net/</id>
  <link href="http://re-dzine.net/"/>
  <link href="http://re-dzine.net/feed.xml" rel="self"/>
  <updated>2014-02-13T02:00:00Z</updated>
  <author>
    <name>konitter</name>
  </author>
  <entry>
    <title>Emmetの次期バージョンv1.1(Beta)の新機能がスゴい</title>
    <link rel="alternate" href="http://re-dzine.net/2014/02/emmet-beta-v1-1/"/>
    <id>http://re-dzine.net/2014/02/emmet-beta-v1-1/</id>
    <published>2014-02-13T02:00:00Z</published>
    <updated>2014-02-13T11:09:15+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://emmet.io/"&gt;Emmet&lt;/a&gt;といえば、HTMLやCSSが爆速で書けるようになるWeb制作者なら誰もが知っているであろうアレですが、現在次期バージョンとしてv1.1の開発が進められています。そのことは、昨年の12月23日に&lt;a href="http://emmet.io/blog/beta-v1-1/"&gt;Emmet公式ブログで発表&lt;/a&gt;されたものの、あまり話題になっていないようなのでここで簡単にご紹介します。&lt;/p&gt;

&lt;h2&gt;インストール方法&lt;/h2&gt;

&lt;p&gt;v1.1(Beta)は現状&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;でのみ試すことができます。なお、現時点ではまだ正式なリリース版ではありませんので、ご利用はあくまでも自己責任でお願いします。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;すでにEmmetを入れているなら別の場所にバックアップを取ったうえでPackage ControlからEmmetを削除。&lt;/li&gt;
&lt;li&gt;一旦Sublime Textを終了しておく。&lt;/li&gt;
&lt;li&gt;ターミナルからSublime Textの&lt;code&gt;Packages&lt;/code&gt;フォルダに移動して&lt;a href="https://github.com/sergeche/emmet-sublime/"&gt;プラグインのレポジトリ&lt;/a&gt;を&lt;code&gt;git clone&lt;/code&gt;し、v1.1のブランチに&lt;code&gt;git checkout v1.1&lt;/code&gt;で切り替える。そういうのが難しい人は&lt;a href="https://github.com/sergeche/emmet-sublime/archive/v1.1.zip"&gt;ここからダウンロード&lt;/a&gt;して解凍したものを置く。&lt;/li&gt;
&lt;li&gt;Sublime Textを起動。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;v1.1の新機能（11個）&lt;/h2&gt;

&lt;h3&gt;1. Can I Useデータベースのサポート&lt;/h3&gt;

&lt;p&gt;ベンダープレフィックスが必要なCSSのプロパティおよびその値の展開には、CSSやHTML5などの各ブラウザ対応状況が確認できるWebサービス「&lt;a href="http://caniuse.com/"&gt;Can I Use&lt;/a&gt;」のデータベースを用いて行われます。&lt;br&gt;
デフォルトでは全ブラウザの2つ前までを範囲としますが、&lt;code&gt;caniuse.era&lt;/code&gt;と&lt;code&gt;caniuse.vendors&lt;/code&gt;の設定で微調整することができるようです。くわしくはこの&lt;a href="https://github.com/emmetio/emmet/blob/umd/lib/assets/caniuse.js#L19"&gt;モジュールヘッダー&lt;/a&gt;を参照。&lt;/p&gt;

&lt;h3&gt;2. LESSとSCSSのフルサポート&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://docs.emmet.io/actions/toggle-comment/"&gt;Toggle Comment&lt;/a&gt;、&lt;a href="http://docs.emmet.io/actions/update-image-size/"&gt;Update Image Size&lt;/a&gt;、&lt;a href="http://docs.emmet.io/actions/select-item/"&gt;Select Item&lt;/a&gt;などのアクションがLESSとSCSS（SASSは除く）のファイルで動くようになります。&lt;/p&gt;

&lt;h3&gt;3. SlimとJadeの構文をサポート&lt;/h3&gt;

&lt;p&gt;Emmetの&lt;a href="http://docs.emmet.io/filters/"&gt;Filters&lt;/a&gt;の機能がアップデートされ、HTMLを&lt;a href="https://github.com/slim-template/slim"&gt;Slim&lt;/a&gt;および&lt;a href="https://github.com/visionmedia/jade"&gt;Jade&lt;/a&gt;の構文で展開できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;p.title&amp;gt;a[/hoge/]|slim
↓
p.title
  a href=&amp;quot;/hoge/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4. CSS Gradientジェネレータのアップデート&lt;/h3&gt;

&lt;p&gt;W3C構文の仕様やCan I Useデータベースなど複数の定義をサポートします。&lt;/p&gt;

&lt;pre&gt;&lt;code class="css"&gt;lg(red, black)
↓
background-image: -webkit-linear-gradient(red, black);
background-image: -o-linear-gradient(red, black);
background-image: linear-gradient(red, black);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;5. Boolean型属性&lt;/h3&gt;

&lt;p&gt;属性名の後ろにドットを書くことで、同じ名前と値を持つ属性を短く書けるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;inp[type=radio][checked.]
↓
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;&amp;quot; id=&amp;quot;&amp;quot; checked&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;6. 暗黙の属性値&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;img&lt;/code&gt;要素の&lt;code&gt;src&lt;/code&gt;属性などHTML要素において値が必須な属性は、その属性名を省略できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;img[src=image.png]
↓
img[image.png]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;7. デフォルトの属性&lt;/h3&gt;

&lt;p&gt;属性が必須でない要素も暗黙の属性値によって値を展開できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;script → &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;
↓
script[jquery.js] → &amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;8. 新アクション「Update Tag」&lt;/h3&gt;

&lt;p&gt;新たに追加されるアクション「Update Tag」を使うことで、すでに記述（展開）済みのHTML要素をEmmetの機能で更新できるようになります。更新したい要素にカーソルを置き以下のコマンドを叩くと、「Enter Abbreviation:」というダイアログがエディタのウィンドウ下に開くので、追加したい属性や値を書いてEnterします。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;header&amp;gt;|&amp;lt;/header&amp;gt;
↓
[shift]+[ctrl]+[u] → .global → Enter
↓
&amp;lt;header class=&amp;quot;global&amp;quot;&amp;gt;&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;9. アクション名「Match Tag Pair」を「Balance」に変更&lt;/h3&gt;

&lt;p&gt;v1でも実装されている&lt;a href="http://docs.emmet.io/actions/match-pair/"&gt;Match Tag Pair&lt;/a&gt;のアクション名が「Balance」に変更され、またCSSでもそのアクションが動くようになります。&lt;/p&gt;

&lt;h3&gt;10. CSSをシングルラインで展開できるオプションを追加&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;syntaxProfiles.json&lt;/code&gt;（Sublime Textなら&lt;code&gt;Emmet.sublime-settings&lt;/code&gt;）にて&lt;code&gt;&amp;quot;css&amp;quot;: &amp;quot;css_line&amp;quot;&lt;/code&gt;を設定するとCSSのプロパティがシングルラインで展開されるようになります。くわしくは&lt;a href="http://docs.emmet.io/customization/syntax-profiles/"&gt;こちらのドキュメント&lt;/a&gt;を参照。&lt;/p&gt;

&lt;h3&gt;11. RGBaカラーのシンタックスを追加&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;color&lt;/code&gt;プロパティなどでのカラーコードの展開において、後ろに&lt;code&gt;.N&lt;/code&gt;を付けることで、CSS3のRGBaで開きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class="css"&gt;c#dca.7
↓
color: rgba(221, 204, 170, 0.7);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;公式ブログの該当エントリーには他にも、EmmetはそもそもNode.JSに準拠した書き方がされているので、npm packageとして提供される日も近いとのことです。実際、Emmetの開発版と思われるブランチが&lt;a href="https://github.com/emmetio/emmet/blob/umd/Gruntfile.js"&gt;Gruntでビルドできるように&lt;/a&gt;なっています。&lt;/p&gt;

&lt;p&gt;具体的なリリース日は未定ですが、その動向には注視していきたいです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Gruntに置き換わるか？新生ビルドシステム「gulp」v3.5.2入門</title>
    <link rel="alternate" href="http://re-dzine.net/2014/02/getting-started-with-gulp/"/>
    <id>http://re-dzine.net/2014/02/getting-started-with-gulp/</id>
    <published>2014-02-07T02:56:00Z</published>
    <updated>2014-02-07T12:03:00+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;みなさんご存知「&lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt;」は、WEB制作者の間でも以前に比べるとだいぶ浸透してきているようで、実際に案件で使用しているという方も増えてきています。そんな中、ここ最近海外のエンジニアの中でGruntに変わって使われだしている新たなビルドシステム「&lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt;」をご紹介します。&lt;/p&gt;

&lt;h2&gt;Grunt vs gulp&lt;/h2&gt;

&lt;p&gt;Gruntは、設定ファイル&lt;code&gt;Gruntfile&lt;/code&gt;がJSON形式で書けるという側面から一見わかりやすく見えますが、実案件で使用する場合、10〜20個のプラグインを使うということもザラにあります。そうなると&lt;code&gt;Gruntfile&lt;/code&gt;の記述量がどんどん増えていき、どのタスクがどのタスクと繋がっていて、結果どうなるかが非常に分かりにくくなるという欠点があります。&lt;/p&gt;

&lt;p&gt;また、複数のタスクを使った一連の流れにおいて、個々のタスクを実行するたびにファイルの読み込みと書き込みが発生するため、非常に無駄の多い仕様になっています。このため、タスクおよびそのタスクの対象となるファイルが多くなると、タスクが完全に終了するまでに時間がかかってしまうということがあります。&lt;/p&gt;

&lt;p&gt;一方gulpは、ベースになっているNode.jsプログラムに基づいた書き方で設定ファイル&lt;code&gt;gulpfile&lt;/code&gt;が定義でき、どのファイルに対してどんな処理をするのかが一目瞭然となります（くわしくは後ほど）。プログラムライクで難しそうに見えますが、一度体験してみるとその良さに気付くことでしょう。&lt;/p&gt;

&lt;p&gt;さらに、個々のタスクは非同期に実行され、ファイルの扱いにおいても&lt;a href="http://nodejs.org/api/stream.html"&gt;Node.jsのStreamというAPI&lt;/a&gt;を使うことで中間ファイルを生成することなくやりとりできるので、非常に高速にタスクを実行することができます。Streamについてのくわしくはここでは割愛しますが、gulpの開発者たちも勧める「&lt;a href="https://github.com/substack/stream-handbook"&gt;substack/stream-handbook&lt;/a&gt;」を読むとより理解が深まるはずです。&lt;/p&gt;

&lt;h2&gt;Gruntfile vs gulpfile&lt;/h2&gt;

&lt;p&gt;では実際にGruntとgulpそれぞれの設定ファイルの違いを見てみます。ここでは、&lt;a href="https://github.com/twbs/bootstrap-sass"&gt;twbs/bootstrap-sass&lt;/a&gt;の40個あるSCSSファイルの監視 → CSSファイルへのコンパイル → autoprefixerによるベンダープレフィックスの付与、という一連の流れを例にしてみます。&lt;/p&gt;

&lt;h3&gt;Gruntfile.js&lt;/h3&gt;

&lt;pre&gt;&lt;code class="js"&gt;grunt.initConfig({
  sass: {
    dist: {
      files: [{
        cwd: &amp;#39;sass&amp;#39;,
        src: &amp;#39;bootstrap.scss&amp;#39;,
        dest: &amp;#39;.tmp/&amp;#39;,
        expand: true,
        ext: &amp;#39;.css&amp;#39;
      }]
    }
  },
  autoprefixer: {
    options: [&amp;#39;last 1 version&amp;#39;],
    dist: {
      files: [{
        expand: true,
        cwd: &amp;#39;.tmp/&amp;#39;,
        src: &amp;#39;bootstrap.css&amp;#39;,
        dest: &amp;#39;dist/css&amp;#39;
      }]
    }
  },
  watch: {
    styles: {
      files: [&amp;#39;sass/{,*/}*.scss&amp;#39;],
      tasks: [&amp;#39;sass:dist&amp;#39;, &amp;#39;autoprefixer:dist&amp;#39;]
    }
  }
});
grunt.registerTask(&amp;#39;default&amp;#39;, [&amp;#39;sass&amp;#39;, &amp;#39;watch&amp;#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gruntはプラグインごとに読み込み元のファイルと出力先のファイルを設定する必要があるため、非常に冗長です。これと同じ処理をgulpでやるとどうなるでしょうか？&lt;/p&gt;

&lt;h3&gt;gulpfile.js&lt;/h3&gt;

&lt;pre&gt;&lt;code class="js"&gt;gulp.task(&amp;#39;sass&amp;#39;, function () {
  gulp.src(&amp;#39;sass/bootstrap.scss&amp;#39;)
    .pipe(sass())
    .pipe(autoprefixer(&amp;#39;last 1 version&amp;#39;))
    .pipe(gulp.dest(&amp;#39;dist/css&amp;#39;));
});
gulp.task(&amp;#39;default&amp;#39;, [&amp;#39;sass&amp;#39;], function() {
  gulp.watch(&amp;#39;sass/**/*.scss&amp;#39;, [&amp;#39;sass&amp;#39;]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。特に2行目から5行目を見るとわかりますが、&lt;code&gt;gulp.src()&lt;/code&gt;で読み込んだファイルを&lt;code&gt;.pipe()&lt;/code&gt;を使って繋いだタスクで処理します。&lt;code&gt;sass()&lt;/code&gt;でコンパイルして&lt;code&gt;autoprefixer()&lt;/code&gt;でプレフィックス付けて、&lt;code&gt;gulp.dest()&lt;/code&gt;で出力。流れがわかりやすいですね。&lt;/p&gt;

&lt;p&gt;実際にこのGruntとgulpのタスクをMacbook Air（11-inch, Mid 2012）で実行したところ、以下のようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img alt="Grunt" src="/img/2014/02/grunt.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="gulp" src="/img/2014/02/gulp.png" /&gt;&lt;/p&gt;

&lt;p&gt;結果的にはgulpの方が若干早かったのですが、この実行時間にはGruntとgulp本体やそれぞれのプラグインの読み込み・起動時間が含まれているわけですし、プラグイン内部のプログラムおよび使っているモジュールも異なるので、単純に比較できるものではありません。同じ構成であってもプラグインの組み合わせやタスクの内容によってはGruntよりもgulpの方が時間がかかることもあるのです。&lt;/p&gt;

&lt;h2&gt;gulpを使ってみる&lt;/h2&gt;

&lt;p&gt;使い方はいたって簡単です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install -g gulp&lt;/code&gt;でgulpをグローバルにインストール。&lt;/li&gt;
&lt;li&gt;プロジェクトディレクトリに&lt;code&gt;package.json&lt;/code&gt;を用意。なければ&lt;code&gt;npm init&lt;/code&gt;で対話的に作成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install --save-dev gulp gulp-hoge&lt;/code&gt;でgulpとプラグインをローカルに入れる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;を作ってプロジェクトのルートに置く。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gulp [task name]&lt;/code&gt;で実行。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;gulpのプラグインはnpmやGitHubで検索してもよいですし、プラグインのまとめページ&lt;a href="http://gratimax.github.io/search-gulp-plugins/"&gt;gulp plugins&lt;/a&gt;（記事の執筆時点では257個）から探すこともできます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gulpfile.js&lt;/code&gt;の書き方などについては、&lt;a href="https://github.com/gulpjs/gulp/blob/master/docs/README.md"&gt;gulpのドキュメントページ&lt;/a&gt;を一通り読んだうえで、あとは各プラグインのREADMEを参考にタスクを設定すれば期待通りに動くはずです。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ここまで言っといてなんですが結局のところ好みの問題なので、Gruntとgulpどっちがいいかを述べることは簡単ではありません。また、複数のエンジニアが案件に携わるような環境だと急にGruntからgulpに乗り換えるということが難しい場合もあると思います。&lt;/p&gt;

&lt;p&gt;また、実行速度の違いに関しては、GitHubで公開されている&lt;a href="https://github.com/gruntjs/grunt-docs/blob/master/Roadmap.md"&gt;Gruntの次期バージョンv0.5のロードマップ&lt;/a&gt;を見ると、それこそgulpのように複数のタスクをつなげてデータのやり取りができるようになるみたいですので、将来的には変わらなくなるのかもしれません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// load a set of tasks to be run in parallel
grunt.registerTask(&amp;#39;name&amp;#39;, [&amp;#39;jshint&amp;#39;, &amp;#39;concat&amp;#39;], { parallel:true });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とにかく大事なのは、なんのためにビルドツールを使うのかということです。そこを忘れずにいれば、Gruntもgulpもどちらも便利なツールであることには違いありませんので、クオリティーの高い制作を行うことができるでしょう。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Middlemanで作ったブログのテンプレートエンジンをERBからSlimに</title>
    <link rel="alternate" href="http://re-dzine.net/2014/01/middleman-slim/"/>
    <id>http://re-dzine.net/2014/01/middleman-slim/</id>
    <published>2014-01-08T10:20:00Z</published>
    <updated>2014-01-09T12:05:52+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;今どき生の HTML を書いてるようじゃモテないって聞いたので、昨年10月末に &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt; で作ったこのブログのテンプレートエンジンをデフォルトの ERB から &lt;a href="https://github.com/slim-template/slim"&gt;Slim&lt;/a&gt; に変更しました。&lt;/p&gt;

&lt;h2&gt;HamlとSlim&lt;/h2&gt;

&lt;p&gt;Middleman では Slim だけでなく &lt;a href="https://github.com/haml/haml"&gt;Haml&lt;/a&gt; も使えます。Haml は Middleman に標準で装備されているので、ファイルの拡張子を&lt;code&gt;hoge.html.haml&lt;/code&gt;にするだけですぐに使いはじめることができます。が、HTML要素の頭に&lt;code&gt;%&lt;/code&gt;を書くっていう記法が気持ち悪かったのと、Slim だと属性をカッコで囲まなくてよく、さらに簡潔に書けるので今回は Slim を採用。&lt;/p&gt;

&lt;p&gt;Haml と Slim の簡単な比較は、それぞれの Github か以下のページから確認できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tech-sketch.jp/2013/07/haml-slim-middleman.html"&gt;HamlとSlimをMiddleman上で比較する - Tech-Sketch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;MiddlemanでSlimを使う&lt;/h2&gt;

&lt;p&gt;Middleman のプロジェクトを新規に作る場合は、&lt;a href="https://github.com/yterajima/middleman-slim"&gt;middleman-slim&lt;/a&gt; という最初からテンプレートファイルが Slim になっているエクステンションを使うといいです。&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ gem install middleman
$ gem install middleman-slim
$ middleman init PROJECT_NAME --template slim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回の僕のように途中から Slim に変更する場合は、Slim を利用するために gem をインストールする必要があります。とはいえ方法は簡単で、以下の一行をMiddlemanプロジェクトのルートにある&lt;code&gt;Gemfile&lt;/code&gt;に追加して&lt;code&gt;bundle install&lt;/code&gt;。簡単。&lt;/p&gt;

&lt;pre&gt;&lt;code class="gemfile"&gt;gem &amp;quot;slim&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは各テンプレートファイルの拡張子を&lt;code&gt;hoge.html.slim&lt;/code&gt;に変更して、記法に従って書くだけ。以下のような HTML から Slim に変換してくれるサイトもあるので、めんどくさい人はどうぞ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://html2slim.herokuapp.com/"&gt;Html2Slim | Convert HTML Snippets to Slim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;オプションを設定してSlimの出力結果を制御する&lt;/h2&gt;

&lt;p&gt;何の設定もなしにデフォルトだと以下のような HTML が出力されます。（head内の一部を抜粋）&lt;br&gt;
コードは圧縮、属性の順番がソートされ、さらに閉じタグのないものは XHTML な感じに。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;&amp;lt;title&amp;gt;Middlemanで作ったブログのテンプレートエンジンをERBからSlimに | REFLECTDESIGN&amp;lt;/title&amp;gt;&amp;lt;meta content=&amp;quot;width=device-width,initial-scale=1&amp;quot; name=&amp;quot;viewport&amp;quot; /&amp;gt;&amp;lt;meta content=&amp;quot;REFLECTDESIGN&amp;quot; property=&amp;quot;og:site_name&amp;quot; /&amp;gt;&amp;lt;meta content=&amp;quot;Middlemanで作ったブログのテンプレートエンジンをERBからSlimに | REFLECTDESIGN&amp;quot; property=&amp;quot;og:title&amp;quot; /&amp;gt;&amp;lt;meta content=&amp;quot;article&amp;quot; property=&amp;quot;og:type&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;個人的には嘔吐感が半端なかったので、以下の設定を&lt;code&gt;config.rb&lt;/code&gt;に加えてやります。&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;set :slim, { :pretty =&amp;gt; true, :sort_attrs =&amp;gt; false, :format =&amp;gt; :html5 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;するとこんな風に。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Middlemanで作ったブログのテンプレートエンジンをERBからSlimに | REFLECTDESIGN&amp;lt;/title&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content=&amp;quot;REFLECTDESIGN&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;Middlemanで作ったブログのテンプレートエンジンをERBからSlimに | REFLECTDESIGN&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;article&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その他のオプションについては &lt;a href="https://github.com/slim-template/slim#available-options"&gt;Github の Available options&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h2&gt;ビルド時にHTMLをMinifyする&lt;/h2&gt;

&lt;p&gt;上記のオプションでHTMLコードは見やすくなったものの、&lt;code&gt;middleman build&lt;/code&gt;するときにはHTMLファイルを Minify したくなりました。そんなときは、&lt;a href="https://github.com/middleman/middleman-minify-html"&gt;Middleman-Minify-HTML&lt;/a&gt; を使います。&lt;/p&gt;

&lt;p&gt;使い方は&lt;code&gt;Gemfile&lt;/code&gt;に以下の一行を追加して&lt;code&gt;bundle install&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class="gemfile"&gt;gem &amp;#39;middleman-minify-html&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしてビルド時の設定として以下を&lt;code&gt;config.rb&lt;/code&gt;を追加する。デフォルトでは、&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;などのクオート記号を削除、各HTML要素間にスペースを入れるようになっていたので、以下のオプションを追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;configure :build do
  activate :minify_html, :remove_quotes =&amp;gt; false, :remove_intertag_spaces =&amp;gt; true
  ...
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そもそもこの middleman-minify-html は HTML の Minify に htmlcompressor を使っているので、&lt;a href="https://github.com/paolochiodi/htmlcompressor"&gt;htmlcompressor の Github&lt;/a&gt; に書いてあるオプションを適宜設定すればそれが適用できます。&lt;/p&gt;

&lt;p&gt;出力結果はこのページのソースでも見てもらえればと。&lt;br&gt;
このブログのソースコードは以下にアップしてるので良かったら参考まで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/konitter/konitter.github.io"&gt;konitter/konitter.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>MarkupCafe Osaka Vol.1 に参加してきました</title>
    <link rel="alternate" href="http://re-dzine.net/2013/12/markupcafe-osaka-vol1/"/>
    <id>http://re-dzine.net/2013/12/markupcafe-osaka-vol1/</id>
    <published>2013-12-26T08:20:00Z</published>
    <updated>2013-12-27T16:02:41+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;先日12/20(金)に開催されたhtml5jマークアップ部主催のイベント「&lt;a href="http://atnd.org/events/45379"&gt;MarkupCafe Osaka Vol.1&lt;/a&gt;」に参加してきましたので簡単にレポートします。&lt;/p&gt;

&lt;p&gt;参加者はいくつかのチームに分かれ、出題されたお題についてチームごとに最適なマークアップを考えます。チーム内で話し合って決めたコードは&lt;a href="http://jsdo.it/"&gt;jsdo.it&lt;/a&gt;に書いてハッシュタグ&lt;a href="http://twitter.com/search?q=%23html5j"&gt;#html5j&lt;/a&gt;を付けてTwitterに投稿、そのコードをプロジェクターで映してみんなでレビュー、という感じ。&lt;/p&gt;

&lt;h2&gt;お題1 「フッター」&lt;/h2&gt;

&lt;p&gt;&lt;img alt="お題1" src="https://pbs.twimg.com/media/Bb6-jhdIYAA71oT.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;1問目は企業サイトで使われるようなイメージのフッター。マークアップするうえでの個人的にポイントだと思うものを3つ挙げてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上の「HOME &amp;gt;」

&lt;ul&gt;
&lt;li&gt;パッと見でパンくずのように見えるから&lt;code&gt;ul&lt;/code&gt;や`&lt;code&gt;ol&lt;/code&gt;でマークアップしがちだけど、出題者の村岡さん（&lt;a href="https://twitter.com/bathtimefish"&gt;@bathtimefish&lt;/a&gt;）によると「これはただのHOMEへのリンク」とのこと&lt;/li&gt;
&lt;li&gt;他のページではこの部分がどうなるかなどデザイナーに確認しましょうねっていう。エンジニアの勝手な想像でマークアップするの(・A・)ｲｸﾅｲ!!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ロゴマークと会社名（日本語表記と英語表記）

&lt;ul&gt;
&lt;li&gt;会社名の部分をテキストで書いて配置する人もいるかもしれないけど、個人的にはロゴマークと会社名全体を1枚の画像でいい&lt;/li&gt;
&lt;li&gt;時間に余裕があってこだわりたい人は、SVG使ったりWebフォント使ったり好きにすればいいかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「お問合せ」の電話番号・メールアドレスおよび、神戸・東京本社の住所

&lt;ul&gt;
&lt;li&gt;ポイントとなるのは&lt;code&gt;address&lt;/code&gt;要素の使い方。どの範囲をくくるか&lt;/li&gt;
&lt;li&gt;このデザインでは明示的に「お問合せ：」というテキストがあり、その横に電話番号とメールアドレスが書かれているので、個人的にはその範囲が&lt;code&gt;address&lt;/code&gt;の範囲になると考えた&lt;/li&gt;
&lt;li&gt;その下の神戸・東京本社の住所まで含めるかどうかは、このページ（ドキュメント）の問い合わせ先となりうるかどうかで決まるはずなので、それはデザイナーやあるいはクライアントであるこの企業に確認が必要な部分だと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のポイントもふまえて、個人的にマークアップするならこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;footer role=&amp;quot;contentinfo&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;HOME&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;img src=&amp;quot;logo.png&amp;quot; alt=&amp;quot;株式会社バスタイム商事 Bathtime Bussiness Corp.&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;address&amp;gt;お問合せ：&amp;lt;a href=&amp;quot;tel:012000000000&amp;quot;&amp;gt;0120-0000-0000&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;mailto:information@bathtimeshoji.com&amp;quot;&amp;gt;information[at]bathtimeshoji.com&amp;lt;/a&amp;gt;&amp;lt;/address&amp;gt;
      神戸本社：兵庫県神戸市◯◯◯◯◯ 11-11-11 ◯◯ビル 11&amp;lt;br&amp;gt;
      東京本社：東京都渋谷区◯◯◯◯◯ 22-22-22 ◯◯ビル 22
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;small&amp;gt;copyright (c) bathtimeshoji. All Rights Reserved.&amp;lt;/small&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;お題2 「パンくずリスト」&lt;/h2&gt;

&lt;p&gt;&lt;img alt="お題2" src="/img/2013/12/breadcrumb.png" /&gt;&lt;/p&gt;

&lt;p&gt;2問目はいわゆるパンくずリスト。定期的に話題になるある意味ネタ化しているUIのひとつで、&lt;a href="http://www.w3.org/html/wg/drafts/html/master/common-idioms.html#rel-up"&gt;HTML5.1 Nightlyのドキュメントのパンくずリストのセクション&lt;/a&gt;を見るとコード例に「→」が使われていたりして、W3Cでも明確な答えが出せていません。&lt;/p&gt;

&lt;p&gt;ただそうなっている理由自体は単純で、パンくずリストが置かれる状況によって、また情報提供者の意図によってどんなマークアップがふさわしいかが異なってくるからです。なので、パンくずリストだけのデザインを見せられてマークアップするのは本来ならそれはとても難しいことのはずです。&lt;/p&gt;

&lt;p&gt;また、そもそもリストかリストでないかという議論もありますが、取り回ししやすさを重視して、個人的には極々シンプルにマークアップしたいところです。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;ul class=&amp;quot;breadcrumb&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;Markup Cafeトップページ&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/shop/&amp;quot;&amp;gt;店舗情報&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;current&amp;quot;&amp;gt;ドリンク・フード&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;自分のコードを振り返るようなことをあまりしない、あるいは他人のコードや考え方などを普段気にせず制作されているような方は特に、非常に刺激的なイベントだと思います。たまにはこういうのもいいですよ。また是非参加したいです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>各種ブラウザを同期して手軽に複数環境での確認ができるようになるgrunt-browser-syncについて紹介するよ</title>
    <link rel="alternate" href="http://re-dzine.net/2013/12/grunt-browser-sync/"/>
    <id>http://re-dzine.net/2013/12/grunt-browser-sync/</id>
    <published>2013-12-16T02:23:00Z</published>
    <updated>2013-12-17T09:49:48+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;この投稿は&lt;a href="http://qiita.com/advent-calendar/2013/grunt-plugins"&gt;Grunt Plugins Advent Calendar 2013&lt;/a&gt;の24日目の記事です。&lt;/p&gt;

&lt;h2&gt;grunt-browser-syncとは&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shakyShane/grunt-browser-sync"&gt;shakyShane/grunt-browser-sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同名のnpmモジュール「&lt;a href="https://github.com/shakyShane/browser-sync"&gt;browser-sync&lt;/a&gt;」のGruntプラグインで、PC・モバイル・タブレットなど各種デバイスのブラウザを同期して、複数環境での確認およびテスト開発を超絶手軽にしてくれます。&lt;/p&gt;

&lt;p&gt;このbrowser-syncには以下のような特徴があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スクロールの同期&lt;/li&gt;
&lt;li&gt;フォームの入力操作などの同期&lt;/li&gt;
&lt;li&gt;リンククリックの同期&lt;/li&gt;
&lt;li&gt;CSSをバックグラウンドで自動更新&lt;/li&gt;
&lt;li&gt;HTMLやPHPファイルを監視してライブリロード（エクステンション不要）&lt;/li&gt;
&lt;li&gt;ビルトインサーバ&lt;/li&gt;
&lt;li&gt;PHP, Rails, Python, Node, ASP.netのセットアップで使用できるプロキシオプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも、プラットフォーム問わず動くという点も良い所で、Win7でも問題なく動作します（確認済み）し、ブラウザにおいてもIEも含めて同期することができます。&lt;/p&gt;

&lt;p&gt;似たようなツールに「&lt;a href="http://html.adobe.com/edge/inspect/"&gt;Adobe Edge Inspect&lt;/a&gt;」や「&lt;a href="http://vanamco.com/ghostlab/"&gt;Ghostlab&lt;/a&gt;」があり、いずれも有償ですが、GUIクライアントじゃないとできませんって方はそちらを試してみるとよいかと。&lt;/p&gt;

&lt;h2&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ npm i(install) grunt-browser-sync -D(--save-dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。&lt;/p&gt;

&lt;h2&gt;Gruntfile&lt;/h2&gt;

&lt;p&gt;以下サンプル。その他各種オプションについては、&lt;a href="https://github.com/shakyShane/grunt-browser-sync"&gt;README&lt;/a&gt;を参照。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;use strict&amp;#39;

module.exports = (grunt) -&gt;

  grunt.initConfig
    browser_sync:
      files:
        src: [
          &amp;#39;index.html&amp;#39;,
          &amp;#39;assets/css/*.css&amp;#39;
        ]
      options:
        server:
          index: &amp;#39;index.html&amp;#39;
        ghostMode:
          scroll: true
          links: true
          forms: true

  require(&amp;#39;load-grunt-tasks&amp;#39;)(grunt)

  grunt.registerTask &amp;#39;default&amp;#39;, [&amp;#39;browser_sync&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;実行&lt;/h2&gt;

&lt;p&gt;これで&lt;code&gt;grunt&lt;/code&gt;を叩くと規定のブラウザで&lt;code&gt;index.html&lt;/code&gt;が開きます。&lt;br&gt;
立ち上がったサーバアドレスを他のブラウザで開けば、同ネットワーク内にあるiPhoneやAndroidなどからのアクセスも含めて全ブラウザを同期できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grunt
Running &amp;quot;browser_sync:files&amp;quot; (browser_sync) task
   info  - socket.io started

OK, Server running at http://192.168.0.3:3001
Serving files from:  c:\hoge

Load a browser &amp;amp; check back here. If you set up everything correctly, you&amp;#39;ll see
 a &amp;#39;Browser Connected&amp;#39;  message

Watching the following:
index.html
assets/css/all.css

Browser Connected! (Chrome, version: 31.0.1650.63)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで&lt;code&gt;index.html&lt;/code&gt;を更新してみると、接続しているすべてのブラウザにライブリロードが走ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File Changed: c:\hoge\index.html
Reloading all connected browsers...
Browser Connected! (IE, version: 8.0)
Browser Connected! (Firefox, version: 26.0)
Browser Connected! (Chrome, version: 31.0.1650.63)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他にも、&lt;code&gt;watchTask&lt;/code&gt;オプションにより&lt;code&gt;grunt-contrib-watch&lt;/code&gt;と組み合わせて、CSSプリなんとかファイルの更新からコンパイルして全ブラウザにバックグラウンドで反映、みたいなこともできちゃいます。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最近のWeb制作環境では、PCだけでなくモバイルやタブレットなど各種スマートデバイスでの確認が必須になってきていますので、そんなときこれを使えば確認作業が劇的に楽になるはずです。&lt;/p&gt;

&lt;p&gt;発注サイドの人間からは以上です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHubトレーニングチームから学ぶ GitとGitHubの基礎 に参加してきました</title>
    <link rel="alternate" href="http://re-dzine.net/2013/11/github-training-at-osaka/"/>
    <id>http://re-dzine.net/2013/11/github-training-at-osaka/</id>
    <published>2013-11-22T02:29:00Z</published>
    <updated>2013-11-28T11:50:06+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;11/21(木)に行われた「&lt;a href="http://connpass.com/event/3965/"&gt;GitHubトレーニングチームから学ぶ GitとGitHubの基礎&lt;/a&gt;」に参加しましたので簡単にレポートします。逐一メモってないので、大体の流れ（うろ覚え）と気になったポイントだけ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="octcat" src="/img/2013/11/octcat.gif" /&gt;&lt;/p&gt;

&lt;p&gt;スピーカーは&lt;a href="http://training.github.com/trainers/"&gt;GitHubトレーニングチーム&lt;/a&gt;のMatthewさん（&lt;a href="https://twitter.com/matthewmccull"&gt;@matthewmccul&lt;/a&gt;）とJohnさん（&lt;a href="https://twitter.com/johndbritton"&gt;@johndbritton&lt;/a&gt;）。外かなり寒いのにお二人とも半袖Tシャツ。あと声が割りと高い。（関係ない&lt;/p&gt;

&lt;p&gt;まずはMatthewさんからGitについてと&lt;code&gt;git init&lt;/code&gt;からファイル作ってコミットしてログを見るっていう基本的な流れを簡単に説明。ちなみにスピーカーからの話は当然英語。で、一言話すごとに部屋の後ろにいる日本人の方が通訳してしゃべってくれるんだけど、gitだとかcommitだとか英単語部分の発音だけがやたらナチュラルでなんかかっこよかったです。（小並感&lt;/p&gt;

&lt;p&gt;そのあとはGitの論理構造の話。構造を買い物に例えて、「ステージング・エリアはショッピングカートのようなもの」だと言っていたのには目から鱗。この例えは今まで聞いた論理構造の説明で一番分かりやすい気がする。&lt;/p&gt;

&lt;p&gt;次にGitHubをブラウザからみんな実際に操作して、練習用のリポジトリから各自のアカウントにフォークして、ファイルを作ってコミットしてプルリクエストする流れ。Git（GitHubも）は複数人でやってこそ面白いってのを痛感。あと、コメント欄とかで使える&lt;a href="http://www.emoji-cheat-sheet.com/"&gt;絵文字&lt;/a&gt;が楽しい。お寿司とかいつ使うねんっていう。&lt;/p&gt;

&lt;p&gt;こんな感じで前半終了。後半はJohnさんからGitHub社の理念についてのお話からスタートし、GitHubが開発したツール「&lt;a href="http://boxen.github.com/"&gt;Boxen&lt;/a&gt;」と「&lt;a href="http://hubot.github.com/"&gt;Hubot&lt;/a&gt;」の説明がありました。中身は、&lt;a href="http://www.publickey1.jp/blog/13/githubdevopsboxenhubotdevops_day_tokyo_2013.html"&gt;Publickeyによる「DevOps Day Tokyo 2013」でJohnさんがセッションした内容のレポート&lt;/a&gt;とほぼ同じなので興味がある方はそっちを読むといいです。&lt;/p&gt;

&lt;p&gt;個人的には、コマンド一つでMacに開発環境が一気に構築できる「Boxen」が気になりました。ChromeやSkypeなどソフトウェアのインストールやOS X自体の環境（例えばDockの設定とか）も含めて一発でできるので、新しくMacを買った時やOSをクリーンインストールしてイチから環境を作る時なんかでは、むちゃくちゃ便利だなと。ってかWindowsェ…。&lt;/p&gt;

&lt;p&gt;レポートは以上です。&lt;br&gt;
本当の初心者や上級者にとっては物足りなかったかもしれませんが、ぼくみたいな中途半端な知識の人にとってはすごく分かりやすい内容でした。&lt;/p&gt;

&lt;p&gt;ターミナルなど環境的なことも含めてGitのことをもっと勉強したいと思います。あと、できるだけ英語を聞き取ろうとしてみたものの、全然分かりませんでしたので英語もなんとかしたいです。。&lt;/p&gt;
</content>
  </entry>
</feed>
