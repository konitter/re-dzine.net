<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>REFLECTDESIGN</title>
  <id>http://re-dzine.net/</id>
  <link href="http://re-dzine.net/"/>
  <link href="http://re-dzine.net/feed.xml" rel="self"/>
  <updated>2013-12-26T08:20:00Z</updated>
  <author>
    <name>konitter</name>
  </author>
  <entry>
    <title>MarkupCafe Osaka Vol.1 に参加してきました</title>
    <link rel="alternate" href="http://re-dzine.net/2013/12/markupcafe-osaka-vol1/"/>
    <id>http://re-dzine.net/2013/12/markupcafe-osaka-vol1/</id>
    <published>2013-12-26T08:20:00Z</published>
    <updated>2013-12-27T16:02:41+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;先日12/20(金)に開催されたhtml5jマークアップ部主催のイベント「&lt;a href="http://atnd.org/events/45379"&gt;MarkupCafe Osaka Vol.1&lt;/a&gt;」に参加してきましたので簡単にレポートします。&lt;/p&gt;

&lt;p&gt;参加者はいくつかのチームに分かれ、出題されたお題についてチームごとに最適なマークアップを考えます。チーム内で話し合って決めたコードは&lt;a href="http://jsdo.it/"&gt;jsdo.it&lt;/a&gt;に書いてハッシュタグ&lt;a href="http://twitter.com/search?q=%23html5j"&gt;#html5j&lt;/a&gt;を付けてTwitterに投稿、そのコードをプロジェクターで映してみんなでレビュー、という感じ。&lt;/p&gt;

&lt;h2&gt;お題1 「フッター」&lt;/h2&gt;

&lt;p&gt;&lt;img alt="お題1" src="https://pbs.twimg.com/media/Bb6-jhdIYAA71oT.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;1問目は企業サイトで使われるようなイメージのフッター。マークアップするうえでの個人的にポイントだと思うものを3つ挙げてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上の「HOME &amp;gt;」

&lt;ul&gt;
&lt;li&gt;パッと見でパンくずのように見えるから&lt;code&gt;ul&lt;/code&gt;や`&lt;code&gt;ol&lt;/code&gt;でマークアップしがちだけど、出題者の村岡さん（&lt;a href="https://twitter.com/bathtimefish"&gt;@bathtimefish&lt;/a&gt;）によると「これはただのHOMEへのリンク」とのこと&lt;/li&gt;
&lt;li&gt;他のページではこの部分がどうなるかなどデザイナーに確認しましょうねっていう。エンジニアの勝手な想像でマークアップするの(・A・)ｲｸﾅｲ!!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ロゴマークと会社名（日本語表記と英語表記）

&lt;ul&gt;
&lt;li&gt;会社名の部分をテキストで書いて配置する人もいるかもしれないけど、個人的にはロゴマークと会社名全体を1枚の画像でいい&lt;/li&gt;
&lt;li&gt;時間に余裕があってこだわりたい人は、SVG使ったりWebフォント使ったり好きにすればいいかと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「お問合せ」の電話番号・メールアドレスおよび、神戸・東京本社の住所

&lt;ul&gt;
&lt;li&gt;ポイントとなるのは&lt;code&gt;address&lt;/code&gt;要素の使い方。どの範囲をくくるか&lt;/li&gt;
&lt;li&gt;このデザインでは明示的に「お問合せ：」というテキストがあり、その横に電話番号とメールアドレスが書かれているので、個人的にはその範囲が&lt;code&gt;address&lt;/code&gt;の範囲になると考えた&lt;/li&gt;
&lt;li&gt;その下の神戸・東京本社の住所まで含めるかどうかは、このページ（ドキュメント）の問い合わせ先となりうるかどうかで決まるはずなので、それはデザイナーやあるいはクライアントであるこの企業に確認が必要な部分だと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のポイントもふまえて、個人的にマークアップするならこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;footer role=&amp;quot;contentinfo&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;HOME&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;img src=&amp;quot;logo.png&amp;quot; alt=&amp;quot;株式会社バスタイム商事 Bathtime Bussiness Corp.&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;address&amp;gt;お問合せ：&amp;lt;a href=&amp;quot;tel:012000000000&amp;quot;&amp;gt;0120-0000-0000&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;mailto:information@bathtimeshoji.com&amp;quot;&amp;gt;information[at]bathtimeshoji.com&amp;lt;/a&amp;gt;&amp;lt;/address&amp;gt;
      神戸本社：兵庫県神戸市◯◯◯◯◯ 11-11-11 ◯◯ビル 11&amp;lt;br&amp;gt;
      東京本社：東京都渋谷区◯◯◯◯◯ 22-22-22 ◯◯ビル 22
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;small&amp;gt;copyright (c) bathtimeshoji. All Rights Reserved.&amp;lt;/small&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;お題2 「パンくずリスト」&lt;/h2&gt;

&lt;p&gt;&lt;img alt="お題2" src="/img/2013/12/breadcrumb.png" /&gt;&lt;/p&gt;

&lt;p&gt;2問目はいわゆるパンくずリスト。定期的に話題になるある意味ネタ化しているUIのひとつで、&lt;a href="http://www.w3.org/html/wg/drafts/html/master/common-idioms.html#rel-up"&gt;HTML5.1 Nightlyのドキュメントのパンくずリストのセクション&lt;/a&gt;を見るとコード例に「→」が使われていたりして、W3Cでも明確な答えが出せていません。&lt;/p&gt;

&lt;p&gt;ただそうなっている理由自体は単純で、パンくずリストが置かれる状況によって、また情報提供者の意図によってどんなマークアップがふさわしいかが異なってくるからです。なので、パンくずリストだけのデザインを見せられてマークアップするのは本来ならそれはとても難しいことのはずです。&lt;/p&gt;

&lt;p&gt;また、そもそもリストかリストでないかという議論もありますが、取り回ししやすさを重視して、個人的には極々シンプルにマークアップしたいところです。&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;ul class=&amp;quot;breadcrumb&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;Markup Cafeトップページ&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/shop/&amp;quot;&amp;gt;店舗情報&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li class=&amp;quot;current&amp;quot;&amp;gt;ドリンク・フード&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;自分のコードを振り返るようなことをあまりしない、あるいは他人のコードや考え方などを普段気にせず制作されているような方は特に、非常に刺激的なイベントだと思います。たまにはこういうのもいいですよ。また是非参加したいです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>各種ブラウザを同期して手軽に複数環境での確認ができるようになるgrunt-browser-syncについて紹介するよ</title>
    <link rel="alternate" href="http://re-dzine.net/2013/12/grunt-browser-sync/"/>
    <id>http://re-dzine.net/2013/12/grunt-browser-sync/</id>
    <published>2013-12-16T02:23:00Z</published>
    <updated>2013-12-17T09:49:48+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;この投稿は&lt;a href="http://qiita.com/advent-calendar/2013/grunt-plugins"&gt;Grunt Plugins Advent Calendar 2013&lt;/a&gt;の24日目の記事です。&lt;/p&gt;

&lt;h2&gt;grunt-browser-syncとは&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shakyShane/grunt-browser-sync"&gt;shakyShane/grunt-browser-sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同名のnpmモジュール「&lt;a href="https://github.com/shakyShane/browser-sync"&gt;browser-sync&lt;/a&gt;」のGruntプラグインで、PC・モバイル・タブレットなど各種デバイスのブラウザを同期して、複数環境での確認およびテスト開発を超絶手軽にしてくれます。&lt;/p&gt;

&lt;p&gt;このbrowser-syncには以下のような特徴があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スクロールの同期&lt;/li&gt;
&lt;li&gt;フォームの入力操作などの同期&lt;/li&gt;
&lt;li&gt;リンククリックの同期&lt;/li&gt;
&lt;li&gt;CSSをバックグラウンドで自動更新&lt;/li&gt;
&lt;li&gt;HTMLやPHPファイルを監視してライブリロード（エクステンション不要）&lt;/li&gt;
&lt;li&gt;ビルトインサーバ&lt;/li&gt;
&lt;li&gt;PHP, Rails, Python, Node, ASP.netのセットアップで使用できるプロキシオプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも、プラットフォーム問わず動くという点も良い所で、Win7でも問題なく動作します（確認済み）し、ブラウザにおいてもIEも含めて同期することができます。&lt;/p&gt;

&lt;p&gt;似たようなツールに「&lt;a href="http://html.adobe.com/edge/inspect/"&gt;Adobe Edge Inspect&lt;/a&gt;」や「&lt;a href="http://vanamco.com/ghostlab/"&gt;Ghostlab&lt;/a&gt;」があり、いずれも有償ですが、GUIクライアントじゃないとできませんって方はそちらを試してみるとよいかと。&lt;/p&gt;

&lt;h2&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ npm i(install) grunt-browser-sync -D(--save-dev)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけ。&lt;/p&gt;

&lt;h2&gt;Gruntfile&lt;/h2&gt;

&lt;p&gt;以下サンプル。その他各種オプションについては、&lt;a href="https://github.com/shakyShane/grunt-browser-sync"&gt;README&lt;/a&gt;を参照。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;use strict&amp;#39;

module.exports = (grunt) -&gt;

  grunt.initConfig
    browser_sync:
      files:
        src: [
          &amp;#39;index.html&amp;#39;,
          &amp;#39;assets/css/*.css&amp;#39;
        ]
      options:
        server:
          index: &amp;#39;index.html&amp;#39;
        ghostMode:
          scroll: true
          links: true
          forms: true

  require(&amp;#39;load-grunt-tasks&amp;#39;)(grunt)

  grunt.registerTask &amp;#39;default&amp;#39;, [&amp;#39;browser_sync&amp;#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;実行&lt;/h2&gt;

&lt;p&gt;これで&lt;code&gt;grunt&lt;/code&gt;を叩くと規定のブラウザで&lt;code&gt;index.html&lt;/code&gt;が開きます。&lt;br&gt;
立ち上がったサーバアドレスを他のブラウザで開けば、同ネットワーク内にあるiPhoneやAndroidなどからのアクセスも含めて全ブラウザを同期できるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grunt
Running &amp;quot;browser_sync:files&amp;quot; (browser_sync) task
   info  - socket.io started

OK, Server running at http://192.168.0.3:3001
Serving files from:  c:\hoge

Load a browser &amp;amp; check back here. If you set up everything correctly, you&amp;#39;ll see
 a &amp;#39;Browser Connected&amp;#39;  message

Watching the following:
index.html
assets/css/all.css

Browser Connected! (Chrome, version: 31.0.1650.63)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで&lt;code&gt;index.html&lt;/code&gt;を更新してみると、接続しているすべてのブラウザにライブリロードが走ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File Changed: c:\hoge\index.html
Reloading all connected browsers...
Browser Connected! (IE, version: 8.0)
Browser Connected! (Firefox, version: 26.0)
Browser Connected! (Chrome, version: 31.0.1650.63)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他にも、&lt;code&gt;watchTask&lt;/code&gt;オプションにより&lt;code&gt;grunt-contrib-watch&lt;/code&gt;と組み合わせて、CSSプリなんとかファイルの更新からコンパイルして全ブラウザにバックグラウンドで反映、みたいなこともできちゃいます。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最近のWeb制作環境では、PCだけでなくモバイルやタブレットなど各種スマートデバイスでの確認が必須になってきていますので、そんなときこれを使えば確認作業が劇的に楽になるはずです。&lt;/p&gt;

&lt;p&gt;発注サイドの人間からは以上です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHubトレーニングチームから学ぶ GitとGitHubの基礎 に参加してきました</title>
    <link rel="alternate" href="http://re-dzine.net/2013/11/github-training-at-osaka/"/>
    <id>http://re-dzine.net/2013/11/github-training-at-osaka/</id>
    <published>2013-11-22T02:29:00Z</published>
    <updated>2013-11-28T11:50:06+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;11/21(木)に行われた「&lt;a href="http://connpass.com/event/3965/"&gt;GitHubトレーニングチームから学ぶ GitとGitHubの基礎&lt;/a&gt;」に参加しましたので簡単にレポートします。逐一メモってないので、大体の流れ（うろ覚え）と気になったポイントだけ。&lt;/p&gt;

&lt;p&gt;&lt;img alt="octcat" src="/img/2013/11/octcat.gif" /&gt;&lt;/p&gt;

&lt;p&gt;スピーカーは&lt;a href="http://training.github.com/trainers/"&gt;GitHubトレーニングチーム&lt;/a&gt;のMatthewさん（&lt;a href="https://twitter.com/matthewmccull"&gt;@matthewmccul&lt;/a&gt;）とJohnさん（&lt;a href="https://twitter.com/johndbritton"&gt;@johndbritton&lt;/a&gt;）。外かなり寒いのにお二人とも半袖Tシャツ。あと声が割りと高い。（関係ない&lt;/p&gt;

&lt;p&gt;まずはMatthewさんからGitについてと&lt;code&gt;git init&lt;/code&gt;からファイル作ってコミットしてログを見るっていう基本的な流れを簡単に説明。ちなみにスピーカーからの話は当然英語。で、一言話すごとに部屋の後ろにいる日本人の方が通訳してしゃべってくれるんだけど、gitだとかcommitだとか英単語部分の発音だけがやたらナチュラルでなんかかっこよかったです。（小並感&lt;/p&gt;

&lt;p&gt;そのあとはGitの論理構造の話。構造を買い物に例えて、「ステージング・エリアはショッピングカートのようなもの」だと言っていたのには目から鱗。この例えは今まで聞いた論理構造の説明で一番分かりやすい気がする。&lt;/p&gt;

&lt;p&gt;次にGitHubをブラウザからみんな実際に操作して、練習用のリポジトリから各自のアカウントにフォークして、ファイルを作ってコミットしてプルリクエストする流れ。Git（GitHubも）は複数人でやってこそ面白いってのを痛感。あと、コメント欄とかで使える&lt;a href="http://www.emoji-cheat-sheet.com/"&gt;絵文字&lt;/a&gt;が楽しい。お寿司とかいつ使うねんっていう。&lt;/p&gt;

&lt;p&gt;こんな感じで前半終了。後半はJohnさんからGitHub社の理念についてのお話からスタートし、GitHubが開発したツール「&lt;a href="http://boxen.github.com/"&gt;Boxen&lt;/a&gt;」と「&lt;a href="http://hubot.github.com/"&gt;Hubot&lt;/a&gt;」の説明がありました。中身は、&lt;a href="http://www.publickey1.jp/blog/13/githubdevopsboxenhubotdevops_day_tokyo_2013.html"&gt;Publickeyによる「DevOps Day Tokyo 2013」でJohnさんがセッションした内容のレポート&lt;/a&gt;とほぼ同じなので興味がある方はそっちを読むといいです。&lt;/p&gt;

&lt;p&gt;個人的には、コマンド一つでMacに開発環境が一気に構築できる「Boxen」が気になりました。ChromeやSkypeなどソフトウェアのインストールやOS X自体の環境（例えばDockの設定とか）も含めて一発でできるので、新しくMacを買った時やOSをクリーンインストールしてイチから環境を作る時なんかでは、むちゃくちゃ便利だなと。ってかWindowsェ…。&lt;/p&gt;

&lt;p&gt;レポートは以上です。&lt;br&gt;
本当の初心者や上級者にとっては物足りなかったかもしれませんが、ぼくみたいな中途半端な知識の人にとってはすごく分かりやすい内容でした。&lt;/p&gt;

&lt;p&gt;ターミナルなど環境的なことも含めてGitのことをもっと勉強したいと思います。あと、できるだけ英語を聞き取ろうとしてみたものの、全然分かりませんでしたので英語もなんとかしたいです。。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MarkupCafe Tokyo Vol.2のお題について考えてみた</title>
    <link rel="alternate" href="http://re-dzine.net/2013/11/markupcafe-tokyo-vol2-my-idea/"/>
    <id>http://re-dzine.net/2013/11/markupcafe-tokyo-vol2-my-idea/</id>
    <published>2013-11-07T01:57:00Z</published>
    <updated>2013-11-28T11:50:06+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;10/19(土)にて東京で行われたイベント「&lt;a href="http://atnd.org/events/43774"&gt;MarkupCafe Tokyo Vol.2&lt;/a&gt;」で出されたお題について、自分ならどうマークアップするかを考えてみました。&lt;br&gt;
当日参加された方々のコードは、以下のページから参照できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://u-note.me/note/47486651"&gt;「あなたは、これらを美しくマークアップできるかな？」#Markup CafeTokyo【CodeIQ提供】#html5j | U-NOTE【ユーノート】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;お題1 「ページネーション」&lt;/h2&gt;

&lt;script src="http://jsdo.it/blogparts/3Kun/js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://jsdo.it/_konitter/3Kun"&gt;MarkupCafe Tokyo Vol.2 お題1 「ページネーション」 #html5j - jsdo.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このお題は、他の2つと比べても特に人によってマークアップの違いが出やすいUIの一つな気がします。マークアップするうえでのポイントを挙げてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI自体を何の要素でくくるか

&lt;ul&gt;
&lt;li&gt;上記レポートにもある&lt;code&gt;nav&lt;/code&gt;を使うという意見については、確かにメインコンテンツにより近い「主要な」ナビゲーション（となるケースが多い）とも取れるので、それもアリな気もするけど、まだ自分の中で消化しきれてない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リンクの羅列はリストか

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ul&lt;/code&gt;ではなく&lt;code&gt;ol&lt;/code&gt;、というパターンについては1つの長い記事などを複数のページに分けるような場合だと、そのページの順番に意味があるので、それもアリだと思う&lt;/li&gt;
&lt;li&gt;ただし、ブログのインデックスとかただの記事一覧みたいな場合だと、ページ順にそれほど意味があるとは思えないので、その場合&lt;code&gt;ol&lt;/code&gt;がふさわしいとは思えない&lt;/li&gt;
&lt;li&gt;あと、「...」で間をとばすような感じのパターンの場合、&lt;code&gt;ol&lt;/code&gt;だとハマらない気がする&lt;/li&gt;
&lt;li&gt;また、リストではなく&lt;code&gt;span&lt;/code&gt;を並べるってのもありそうだけど、個人的にナシ。単純に好き嫌いの範疇かも。パンくずリストのマークアップみたいな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「前へ」「次へ」なリンクを分離するかどうか

&lt;ul&gt;
&lt;li&gt;ページ番号のリンクと分けて別の要素にするという人もいるようだけど、別の要素を使うこと自体にメリットは感じられない&lt;/li&gt;
&lt;li&gt;ただ、「次へ」をコード上で最後ではなく「前へ」のすぐ後ろに持ってくるについては、正直言ってわからない。音声読み上げの支援技術ユーザーへの配慮だと思うんだけど、実際そうしてくれた方が嬉しい、とかいう意見があるのかな。あるならそうした方がいいんかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも、1ページ目の時の「前へ」と最後のページの時の「次へ」をどうするか、カレントページの番号をどうするか（どんなクラス名を付けるか）などなどありますが、長くなりそうなのでこの辺で。&lt;/p&gt;

&lt;h2&gt;お題2 「予約フォーム」&lt;/h2&gt;

&lt;script src="http://jsdo.it/blogparts/mjYQ/js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://jsdo.it/_konitter/mjYQ"&gt;MarkupCafe Tokyo Vol.2 お題2 「予約フォーム」 #html5j - jsdo.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このお題に限らずですが、フォームのマークアップは、どこまでセマンティックに（マシンリーダブルな形で）表現するかってところで違いが出てくる内容だと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォーム部分のレイアウト

&lt;ul&gt;
&lt;li&gt;このお題画像の見た目で時間制限がある中では、素直に&lt;code&gt;table&lt;/code&gt;を使うでいい&lt;/li&gt;
&lt;li&gt;実際の案件でマルチデバイス云々みたいな場合だと、無理ではないけれども&lt;code&gt;table&lt;/code&gt;じゃない方がやりやすいってのはあると思う。状況によりけりで&lt;/li&gt;
&lt;li&gt;あと、ラベルとフォーム要素は上下に配置した方が視線の移動が少なくなって良い、みたいな話もあるけど、全てのフォームがそうできるわけじゃないので、それも状況によりけりでいいと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必須のアスタリスク

&lt;ul&gt;
&lt;li&gt;フォームのデザインにおいて「必須」を表すのにアスタリスク（もしくは米印などのマーク）を使うこと、また必須であることをフォーム要素の後ろで表すのは(・A・)ｲｸﾅｲ!!ので、そもそもお題として相応しいかどうか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必須項目の表現方法

&lt;ul&gt;
&lt;li&gt;音声読み上げのことを考慮すると、アスタリスクだけではダメなので、&lt;code&gt;aria-label&lt;/code&gt;と&lt;code&gt;required&lt;/code&gt;、&lt;code&gt;required&lt;/code&gt;に対応していない環境に配慮して&lt;code&gt;aria-required=&amp;quot;true&amp;quot;&lt;/code&gt;を付けた&lt;/li&gt;
&lt;li&gt;音声読み上げ周りの最新の情報として要・不要なものがあるかもだけど、その辺の話はよくわからない。ぜひそっち系に詳しい方のマークアップが見てみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（半角英字）みたいな注釈的なものがフォーム要素の上とか下にあった場合、フォーム要素に単位が付いている場合、あと最近では多くなってきているラベルをプレースホルダーとして使うとか、他にもパターンは色々ありますけど、フォームのマークアップというのは経験がものをいう部分だとも言えると思います。&lt;/p&gt;

&lt;h2&gt;お題3 「財務諸表」&lt;/h2&gt;

&lt;script src="http://jsdo.it/blogparts/8WT9/js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://jsdo.it/_konitter/8WT9"&gt;MarkupCafe Tokyo Vol.2 お題3 「財務諸表」 #html5j - jsdo.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このお題ならもう見たままコーディングで問題ないはず。当のイベントでは各チーム似たような感じだったのも当然といえば当然。これといったポイントもナシで。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;table&lt;/code&gt;なんか使わない、&lt;code&gt;table&lt;/code&gt;が許されるのは小学生までだよねって人もいるかもしれないけど、そんなの十分変態だし通報レベルなので注意が必要です。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ざっと調べたところ、このイベントやお題に対して意見を表明している人がいなさそうなのですが、この辺のマークアップなネタについては一家言ある、という人が自分の周りにはたくさんいるので、そういった方々がどう書くか非常に興味があります。|дﾟ)ﾁﾗｯ&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ブログをWordPressからMiddlemanに移行してGitHub Pagesで運用するようにしてみた</title>
    <link rel="alternate" href="http://re-dzine.net/2013/10/wordpress-to-middleman/"/>
    <id>http://re-dzine.net/2013/10/wordpress-to-middleman/</id>
    <published>2013-10-30T06:08:00Z</published>
    <updated>2013-11-28T11:50:06+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;来月で今契約しているレンタルサーバの期限が切れるということもあって、今回Middleman + GitHub Pagesで作りなおしてみました。いわゆる静的サイトジェネレータでブログを静的ファイルにしちゃえば、GitHub Pagesでホスティングできるので固定費も節約できていいかなと。&lt;/p&gt;

&lt;h2&gt;ジェネレータ選び&lt;/h2&gt;

&lt;p&gt;Middlemanに限らず静的サイトジェネレータは他にもいくつかありますが、ジェネレータ選びで重要視したポイントは、なんといってもまずはWordPressからの移行がしやすいこと、そして記事のパーマリンクを移行前と同じ状態にできること。あとは、GitHub Pagesへのデプロイがしやすい機能があればなおよしって感じ。&lt;/p&gt;

&lt;p&gt;Node.js製のものも含めていろいろ触ってみた結果、これらのポイントを満たしていて、かつ今やるならアツそうなジェネレータということで、今回「Middleman」を選びました。といっても、Rubyとの相性がどうとかあるらしいけど、Windowsだと何かとエラるので環境づくりにはかなり苦労しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com/"&gt;Middleman: Hand-crafted frontend development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;WordPressからの移行準備&lt;/h2&gt;

&lt;p&gt;移行で一番めんどいのが、記事データのマークダウン化。で、調べてみると、WordPressからエクスポートしたXMLファイルから、Middlemanで使えるフォーマットにしたマークダウンファイルにコンバートしてくれるRubyスクリプトを見つけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/salmansqadeer/wordpress-to-middleman"&gt;salmansqadeer/wordpress-to-middleman - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「Getting Started」のとおりに準備して、&lt;code&gt;ruby wordpress_to_middleman.rb&lt;/code&gt;を叩けば、記事ごとにマークダウンファイル化してくれる。とはいっても完璧ではないので、もろもろ調整は必要です。&lt;/p&gt;

&lt;h2&gt;middleman-blogでコーディング&lt;/h2&gt;

&lt;p&gt;Middlemanにはブログを作るための環境が簡単に作れる「middleman-blog」というエクステンションが用意されていて、基本的にはこれを使うといい感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com/blogging/"&gt;Middleman: Blogging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは求める環境に応じて&lt;code&gt;config.rb&lt;/code&gt;で設定を書いたり、テンプレートなど必要なファイルを用意する。&lt;/p&gt;

&lt;h2&gt;GitHub Pagesへのホスティング&lt;/h2&gt;

&lt;p&gt;GitHub Pagesへのデプロイ・ホスティング、および独自ドメインの設定まわりは、以下のページが参考になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://camuro.org/blog/2013/09/renewal.html"&gt;WordPressからmiddlemanに移行してGithub Pagesで運用する方法 - CAMURO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.coiney.com/2013/06/21/host-middleman-blog-on-github/"&gt;middleman-blogをgithubでホストする - Coiney Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;こんな感じで静的サイト化しておけば、他によさそうなジェネレータが出てきたときに、浮気しやすくなっていいかなと。&lt;br&gt;
あ、あと、今回の移行にともなって、RSSフィードのURLが変わってますので、このブログをRSSで読んでるっていう奇特な方は、URLの変更をお願いします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://re-dzine.net/feed.xml"&gt;http://re-dzine.net/feed.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Emmet LiveStyleで爆速HTML/CSSコーディングの境地へ</title>
    <link rel="alternate" href="http://re-dzine.net/2013/08/emmet-livestyle/"/>
    <id>http://re-dzine.net/2013/08/emmet-livestyle/</id>
    <published>2013-08-06T11:35:42Z</published>
    <updated>2013-11-28T11:50:06+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;簡単な記述でHTML/CSSが爆速でコーディングできるという神プラグイン「&lt;a href="http://emmet.io/"&gt;Emmet&lt;/a&gt;」。フロントエンドな人ならほとんどの方が使っているんじゃないかと思います。この度そのEmmetから「Emmet LiveStyle」なるものが出ました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://livestyle.emmet.io/"&gt;Emmet LiveStyle — live bi-directional CSS edit of new generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;簡単に言うと、エディタとブラウザ双方向でCSSがリアルタイムに編集できるプラグインで、現在のところ、Google Chrome、Safari、Sublime Textで動作するとのこと。&lt;/p&gt;

&lt;p&gt;といってもよくわからないと思いますので、まずは以下のスクリーンキャストをご覧ください。一瞬でも「あ、これヤバイわ」って思ったなら試してみる価値は十分にあると思います。&lt;/p&gt;

&lt;p&gt;&lt;iframe width="520" height="390" src="//www.youtube.com/embed/iQLhGbkupS4?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;「Emmet LiveStyle」は以下の手順で簡単に始められます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sublime TextのPackage Controlから「LiveStyle」をインストール&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/diebikgmpmeppiilkaijjbdgciafajmg"&gt;Google Chromeの専用エクステンション&lt;/a&gt;をインストール&lt;/li&gt;
&lt;li&gt;編集したいページを開く&lt;/li&gt;
&lt;li&gt;Sublime TextでCSSファイルを開く&lt;/li&gt;
&lt;li&gt;Google ChromeのDevToolsから「LiveStyle」パネルを開く&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;より詳しい使用方法は「&lt;a href="http://livestyle.emmet.io/usage/"&gt;How to use&lt;/a&gt;」のページを参照。&lt;/p&gt;

&lt;p&gt;個人的にもまだガッツリと触れてませんが、これからのHTML/CSSコーディングでは必須のツールとなりそうです。&lt;/p&gt;
</content>
  </entry>
</feed>
