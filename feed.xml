<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>REFLECTDESIGN</title>
  <id>http://re-dzine.net/</id>
  <link href="http://re-dzine.net/"/>
  <link href="http://re-dzine.net/feed.xml" rel="self"/>
  <updated>2013-11-07T01:57:00Z</updated>
  <author>
    <name>konitter</name>
  </author>
  <entry>
    <title>MarkupCafe Tokyo Vol.2のお題について考えてみた</title>
    <link rel="alternate" href="http://re-dzine.net/2013/11/markupcafe-tokyo-vol2-my-idea/"/>
    <id>http://re-dzine.net/2013/11/markupcafe-tokyo-vol2-my-idea/</id>
    <published>2013-11-07T01:57:00Z</published>
    <updated>2013-11-07T12:12:17+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;10/19(土)にて東京で行われたイベント「&lt;a href="http://atnd.org/events/43774"&gt;MarkupCafe Tokyo Vol.2&lt;/a&gt;」で出されたお題について、自分ならどうマークアップするかを考えてみました。&lt;br&gt;
当日参加された方々のコードは、以下のページから参照できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://u-note.me/note/47486651"&gt;「あなたは、これらを美しくマークアップできるかな？」#Markup CafeTokyo【CodeIQ提供】#html5j | U-NOTE【ユーノート】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;お題1 「ページネーション」&lt;/h2&gt;

&lt;script src="http://jsdo.it/blogparts/3Kun/js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://jsdo.it/_konitter/8WT9"&gt;MarkupCafe Tokyo Vol.2 お題3 「財務諸表」 #html5j - jsdo.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このお題は、他の2つと比べても特に人によってマークアップの違いが出やすいUIの一つな気がします。マークアップするうえでのポイントを挙げてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI自体を何の要素でくくるか

&lt;ul&gt;
&lt;li&gt;上記レポートにもある&lt;code&gt;nav&lt;/code&gt;を使うという意見については、確かにメインコンテンツにより近い「主要な」ナビゲーション（となるケースが多い）とも取れるので、それもアリな気もするけど、まだ自分の中で消化しきれてない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;リンクの羅列はリストか

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ul&lt;/code&gt;ではなく&lt;code&gt;ol&lt;/code&gt;、というパターンについては1つの長い記事などを複数のページに分けるような場合だと、そのページの順番に意味があるので、それもアリだと思う&lt;/li&gt;
&lt;li&gt;ただし、ブログのインデックスとかただの記事一覧みたいな場合だと、ページ順にそれほど意味があるとは思えないので、その場合&lt;code&gt;ol&lt;/code&gt;がふさわしいとは思えない&lt;/li&gt;
&lt;li&gt;あと、「...」で間をとばすような感じのパターンの場合、&lt;code&gt;ol&lt;/code&gt;だとハマらない気がする&lt;/li&gt;
&lt;li&gt;また、リストではなく&lt;code&gt;span&lt;/code&gt;を並べるってのもありそうだけど、個人的にナシ。単純に好き嫌いの範疇かも。パンくずリストのマークアップみたいな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「前へ」「次へ」なリンクを分離するかどうか

&lt;ul&gt;
&lt;li&gt;ページ番号のリンクと分けて別の要素にするという人もいるようだけど、別の要素を使うこと自体にメリットは感じられない&lt;/li&gt;
&lt;li&gt;ただ、「次へ」をコード上で最後ではなく「前へ」のすぐ後ろに持ってくるについては、正直言ってわからない。音声読み上げの支援技術ユーザーへの配慮だと思うんだけど、実際そうしてくれた方が嬉しい、とかいう意見があるのかな。あるならそうした方がいいんかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも、1ページ目の時の「前へ」と最後のページの時の「次へ」をどうするか、カレントページの番号をどうするか（どんなクラス名を付けるか）などなどありますが、長くなりそうなのでこの辺で。&lt;/p&gt;

&lt;h2&gt;お題2 「予約フォーム」&lt;/h2&gt;

&lt;script src="http://jsdo.it/blogparts/mjYQ/js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://jsdo.it/_konitter/mjYQ"&gt;MarkupCafe Tokyo Vol.2 お題2 「予約フォーム」 #html5j - jsdo.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このお題に限らずですが、フォームのマークアップは、どこまでセマンティックに（マシンリーダブルな形で）表現するかってところで違いが出てくる内容だと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォーム部分のレイアウト

&lt;ul&gt;
&lt;li&gt;このお題画像の見た目で時間制限がある中では、素直に&lt;code&gt;table&lt;/code&gt;を使うでいい&lt;/li&gt;
&lt;li&gt;実際の案件でマルチデバイス云々みたいな場合だと、無理ではないけれども&lt;code&gt;table&lt;/code&gt;じゃない方がやりやすいってのはあると思う。状況によりけりで&lt;/li&gt;
&lt;li&gt;あと、ラベルとフォーム要素は上下に配置した方が視線の移動が少なくなって良い、みたいな話もあるけど、全てのフォームがそうできるわけじゃないので、それも状況によりけりでいいと思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必須のアスタリスク

&lt;ul&gt;
&lt;li&gt;フォームのデザインにおいて「必須」を表すのにアスタリスク（もしくは米印などのマーク）を使うこと、また必須であることをフォーム要素の後ろで表すのは(・A・)ｲｸﾅｲ!!ので、そもそもお題として相応しいかどうか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;必須項目の表現方法

&lt;ul&gt;
&lt;li&gt;音声読み上げのことを考慮すると、アスタリスクだけではダメなので、&lt;code&gt;aria-label&lt;/code&gt;と&lt;code&gt;required&lt;/code&gt;、&lt;code&gt;required&lt;/code&gt;に対応していない環境に配慮して&lt;code&gt;aria-required=&amp;quot;true&amp;quot;&lt;/code&gt;を付けた&lt;/li&gt;
&lt;li&gt;音声読み上げ周りの最新の情報として要・不要なものがあるかもだけど、その辺の話はよくわからない。ぜひそっち系に詳しい方のマークアップが見てみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（半角英字）みたいな注釈的なものがフォーム要素の上とか下にあった場合、フォーム要素に単位が付いている場合、あと最近では多くなってきているラベルをプレースホルダーとして使うとか、他にもパターンは色々ありますけど、フォームのマークアップというのは経験がものをいう部分だとも言えると思います。&lt;/p&gt;

&lt;h2&gt;お題3 「財務諸表」&lt;/h2&gt;

&lt;script src="http://jsdo.it/blogparts/8WT9/js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="http://jsdo.it/_konitter/8WT9"&gt;MarkupCafe Tokyo Vol.2 お題3 「財務諸表」 #html5j - jsdo.it&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このお題ならもう見たままコーディングで問題ないはず。当のイベントでは各チーム似たような感じだったのも当然といえば当然。これといったポイントもナシで。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;table&lt;/code&gt;なんか使わない、&lt;code&gt;table&lt;/code&gt;が許されるのは小学生までだよねって人もいるかもしれないけど、そんなの十分変態だし通報レベルなので注意が必要です。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ざっと調べたところ、このイベントやお題に対して意見を表明している人がいなさそうなのですが、この辺のマークアップなネタについては一家言ある、という人が自分の周りにはたくさんいるので、そういった方々がどう書くか非常に興味があります。|дﾟ)ﾁﾗｯ&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ブログをWordPressからMiddlemanに移行してGitHub Pagesで運用するようにしてみた</title>
    <link rel="alternate" href="http://re-dzine.net/2013/10/wordpress-to-middleman/"/>
    <id>http://re-dzine.net/2013/10/wordpress-to-middleman/</id>
    <published>2013-10-30T06:08:00Z</published>
    <updated>2013-10-30T16:56:18+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;来月で今契約しているレンタルサーバの期限が切れるということもあって、今回Middleman + GitHub Pagesで作りなおしてみました。いわゆる静的サイトジェネレータでブログを静的ファイルにしちゃえば、GitHub Pagesでホスティングできるので固定費も節約できていいかなと。&lt;/p&gt;

&lt;h2&gt;ジェネレータ選び&lt;/h2&gt;

&lt;p&gt;Middlemanに限らず静的サイトジェネレータは他にもいくつかありますが、ジェネレータ選びで重要視したポイントは、なんといってもまずはWordPressからの移行がしやすいこと、そして記事のパーマリンクを移行前と同じ状態にできること。あとは、GitHub Pagesへのデプロイがしやすい機能があればなおよしって感じ。&lt;/p&gt;

&lt;p&gt;Node.js製のものも含めていろいろ触ってみた結果、これらのポイントを満たしていて、かつ今やるならアツそうなジェネレータということで、今回「Middleman」を選びました。といっても、Rubyとの相性がどうとかあるらしいけど、Windowsだと何かとエラるので環境づくりにはかなり苦労しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com/"&gt;Middleman: Hand-crafted frontend development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;WordPressからの移行準備&lt;/h2&gt;

&lt;p&gt;移行で一番めんどいのが、記事データのマークダウン化。で、調べてみると、WordPressからエクスポートしたXMLファイルから、Middlemanで使えるフォーマットにしたマークダウンファイルにコンバートしてくれるRubyスクリプトを見つけた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/salmansqadeer/wordpress-to-middleman"&gt;salmansqadeer/wordpress-to-middleman - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「Getting Started」のとおりに準備して、&lt;code&gt;ruby wordpress_to_middleman.rb&lt;/code&gt;を叩けば、記事ごとにマークダウンファイル化してくれる。とはいっても完璧ではないので、もろもろ調整は必要です。&lt;/p&gt;

&lt;h2&gt;middleman-blogでコーディング&lt;/h2&gt;

&lt;p&gt;Middlemanにはブログを作るための環境が簡単に作れる「middleman-blog」というエクステンションが用意されていて、基本的にはこれを使うといい感じ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://middlemanapp.com/blogging/"&gt;Middleman: Blogging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは求める環境に応じて&lt;code&gt;config.rb&lt;/code&gt;で設定を書いたり、テンプレートなど必要なファイルを用意する。&lt;/p&gt;

&lt;h2&gt;GitHub Pagesへのホスティング&lt;/h2&gt;

&lt;p&gt;GitHub Pagesへのデプロイ・ホスティング、および独自ドメインの設定まわりは、以下のページが参考になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://camuro.org/blog/2013/09/renewal.html"&gt;WordPressからmiddlemanに移行してGithub Pagesで運用する方法 - CAMURO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.coiney.com/2013/06/21/host-middleman-blog-on-github/"&gt;middleman-blogをgithubでホストする - Coiney Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;こんな感じで静的サイト化しておけば、他によさそうなジェネレータが出てきたときに、浮気しやすくなっていいかなと。&lt;br&gt;
あ、あと、今回の移行にともなって、RSSフィードのURLが変わってますので、このブログをRSSで読んでるっていう奇特な方は、URLの変更をお願いします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://re-dzine.net/feed.xml"&gt;http://re-dzine.net/feed.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Emmet LiveStyleで爆速HTML/CSSコーディングの境地へ</title>
    <link rel="alternate" href="http://re-dzine.net/2013/08/emmet-livestyle/"/>
    <id>http://re-dzine.net/2013/08/emmet-livestyle/</id>
    <published>2013-08-06T11:35:42Z</published>
    <updated>2013-10-28T15:40:47+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;簡単な記述でHTML/CSSが爆速でコーディングできるという神プラグイン「&lt;a href="http://emmet.io/"&gt;Emmet&lt;/a&gt;」。フロントエンドな人ならほとんどの方が使っているんじゃないかと思います。この度そのEmmetから「Emmet LiveStyle」なるものが出ました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://livestyle.emmet.io/"&gt;Emmet LiveStyle — live bi-directional CSS edit of new generation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;簡単に言うと、エディタとブラウザ双方向でCSSがリアルタイムに編集できるプラグインで、現在のところ、Google Chrome、Safari、Sublime Textで動作するとのこと。&lt;/p&gt;

&lt;p&gt;といってもよくわからないと思いますので、まずは以下のスクリーンキャストをご覧ください。一瞬でも「あ、これヤバイわ」って思ったなら試してみる価値は十分にあると思います。&lt;/p&gt;

&lt;p&gt;&lt;iframe width="520" height="390" src="//www.youtube.com/embed/iQLhGbkupS4?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;「Emmet LiveStyle」は以下の手順で簡単に始められます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sublime TextのPackage Controlから「LiveStyle」をインストール&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/diebikgmpmeppiilkaijjbdgciafajmg"&gt;Google Chromeの専用エクステンション&lt;/a&gt;をインストール&lt;/li&gt;
&lt;li&gt;編集したいページを開く&lt;/li&gt;
&lt;li&gt;Sublime TextでCSSファイルを開く&lt;/li&gt;
&lt;li&gt;Google ChromeのDevToolsから「LiveStyle」パネルを開く&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;より詳しい使用方法は「&lt;a href="http://livestyle.emmet.io/usage/"&gt;How to use&lt;/a&gt;」のページを参照。&lt;/p&gt;

&lt;p&gt;個人的にもまだガッツリと触れてませんが、これからのHTML/CSSコーディングでは必須のツールとなりそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bootstrap3でLESS/JSのコンパイル方法が変更に</title>
    <link rel="alternate" href="http://re-dzine.net/2013/08/compile-in-bootstrap3/"/>
    <id>http://re-dzine.net/2013/08/compile-in-bootstrap3/</id>
    <published>2013-08-02T10:00:16Z</published>
    <updated>2013-10-29T18:45:31+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;先日7/27に&lt;a href="http://getbootstrap.com/"&gt;Bootstrap 3 RC1&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://getbootstrap.com/"&gt;&lt;img src="/img/2013/08/bs3.png" alt="Bootstrap3" width="640" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;フラットなデザインになっていたり、モバイルファーストなコードになっていたりと色々と変わっています。詳しくは、&lt;a href="https://github.com/twbs/bootstrap/pull/6342"&gt;公式の情報&lt;/a&gt;等々を見てもらうとして、個人的に興味をそそられたのが、LESS/JSファイルのコンパイル方法がこれまでのバージョン2系から変わっているということです。&lt;/p&gt;

&lt;p&gt;この部分をちゃんと理解しておかないと、これから案件でBootstrap3を使うかもという人はしんどいんじゃないかと思います。&lt;/p&gt;

&lt;p&gt;では何がどう変わったのか。その辺を簡単にまとめます。&lt;/p&gt;

&lt;h2&gt;Bootstrap2系でのコンパイル方法&lt;/h2&gt;

&lt;p&gt;これまでのBootstrap2系では、&lt;a href="http://bower.io/"&gt;Bower&lt;/a&gt;経由などでGitHubからファイル群を落とすとファイルの中に&lt;code&gt;Makefile&lt;/code&gt;が含まれていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.github.com/twbs/bootstrap/master/Makefile"&gt;bootstrap/Makefile at master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この&lt;code&gt;Makefile&lt;/code&gt;を使って、&lt;code&gt;make&lt;/code&gt;コマンドを叩くことで、LESS/JSファイルをコンパイルしてきました。以下公式のドキュメント。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twbs/bootstrap/tree/master#compiling-css-and-javascript"&gt;Compiling CSS and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LESSファイルなら、以下のコマンドで&lt;code&gt;recess&lt;/code&gt;というnpmモジュールを使ってのLESSファイルのコンパイル・圧縮版の作成。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;$ make bootstrap-css&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;JSファイルなら、以下のコマンドで各種JSファイルの結合・&lt;code&gt;uglifyjs&lt;/code&gt;を使っての圧縮版の作成。といった具合。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;$ make bootstrap-js&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Bootstrap3でのコンパイル方法&lt;/h2&gt;

&lt;p&gt;現在、Bower等でBootstrap3をGitHubから落とすと、これまであった&lt;code&gt;Makefile&lt;/code&gt;はありません。よく見ると代わりに&lt;code&gt;Gruntfile.js&lt;/code&gt;があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.github.com/twbs/bootstrap/3.0.0-wip/Gruntfile.js"&gt;bootstrap/Gruntfile.js at 3.0.0-wip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまりバージョン3では、&lt;code&gt;make&lt;/code&gt;ではなく&lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt;というNode.jsベースのビルドツールを使ってコンパイルすることになります。以下公式のドキュメント。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/twbs/bootstrap#compiling-css-and-javascript"&gt;Compiling CSS and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;説明すると長くなるので、Gruntについての詳しくは以下の記事を見ていただくか、ググるなりしてもらえればと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kojika17.com/2013/03/grunt.js-memo.html"&gt;Web制作で面倒な作業を自動化するビルドツール、Grunt v0.4 入門｜Web Design KOJIKA17&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;必要な環境を整えたうえで以下のコマンドを叩くだけで、&lt;code&gt;jshint&lt;/code&gt;での構文チェック、&lt;code&gt;qunit&lt;/code&gt;でのテスト、&lt;code&gt;recess&lt;/code&gt;でのLESSファイルのコンパイル・圧縮、JSファイルの結合・&lt;code&gt;uglify&lt;/code&gt;での圧縮が走ります。&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;$ grunt&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;LESSだけなら&lt;code&gt;$ grunt dist-css&lt;/code&gt;、JSだけなら&lt;code&gt;$ grunt dist-js&lt;/code&gt;、てな感じでこれまで通り個別にタスクを走らせることも可能。当然、&lt;code&gt;$ grunt watch&lt;/code&gt;でファイルの監視もできる。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回のコンパイル方法以外にも、ローカルでBootstrapのドキュメントを見るには、&lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;といういわゆる静的サイトジェネレータを使うようになっています。&lt;/p&gt;

&lt;p&gt;もう何がなんだか訳がわからないよママン！っていう方もいらっしゃるかもしれませんが、もうそういう時代なんですよねー（遠い目）。
でもこの辺のツールが扱えるようになると開発効率は格段に上がりますし何かと幸せになれるかもしれません。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>第14回リクリセミナー｢Web制作の未来、あなたの未来｣に参加してきました</title>
    <link rel="alternate" href="http://re-dzine.net/2013/07/resem14/"/>
    <id>http://re-dzine.net/2013/07/resem14/</id>
    <published>2013-07-31T09:16:00Z</published>
    <updated>2013-10-29T18:45:31+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;7/27(土)に行われた&lt;a href="http://recreators.doorkeeper.jp/events/4128"&gt;第14回リクリセミナー「Web制作の未来、あなたの未来」&lt;/a&gt;に参加してきました。リクリセミナー自体も参加するのはなんだかんだで初めて。のはず。その辺意外とあいまい。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://recreators.doorkeeper.jp/events/4128"&gt;&lt;img src="/img/2013/07/resem14.png" alt="resem14" width="160" height="160" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回メインセッションとして、こもりまさあきさんからWeb制作の未来のお話、そして今キテるフロントエンドからバックエンドにかかるツール・開発手法の紹介まで150分のまさにメガ盛りメニュー。お腹いっぱい。&lt;/p&gt;

&lt;p&gt;昨年12月にこもりさん直々に黒い画面やツール周りについて教えていただいてから、英語の情報しかなくてもその辺の情報を積極的に収集したり、また自分でも実際に動かしてみたりしてきたので、取り立てて新しい情報はありませんでしたが、自分の向いている方向がブレていないことがわかって個人的には大満足でした。&lt;/p&gt;

&lt;p&gt;初めてこもりさんのセッションを聞いたりスライドを見たという人にとっては、後半の怒涛のツール紹介は、何がなんだかわからず頭が全然追いつかないような状態だったかもしれません。&lt;/p&gt;

&lt;p&gt;大事なのは、紹介されたツールがすべて触れなきゃいけないんだ！というふうに思わないこと。海外を中心にどんどん新しいツールが開発され、今回紹介されたツールも明日には古くなるというような状態です。日々の忙しい中、全部できるようになるなんて簡単なことではありません。&lt;/p&gt;

&lt;p&gt;こもりさんのお話の本質は、Web制作におけるあらゆる手法をいかに効率化して、ムダな時間を無くし、プライベートだったり別の仕事だったりに時間を充てることができるかにあります。その部分を見失わずやっていければ、どんな未来が来ようとも柔軟に対応できる（つまり食いっぱぐれない）のではと思います。&lt;/p&gt;

&lt;p&gt;細かくは書きませんが、6名の方からのライトニングトークもどれもしっかりしたすばらしい内容でした。スライドも見やすいし、喋りも上手だし、みなさんやはり場慣れしてるだけあります。&lt;/p&gt;

&lt;p&gt;少し間が空いてしまうようですが、次回のリクリセミナーも個人的にはかなり気になる感じですので、ぜひ参加したいと思います。
関係者のみなさん、すばらしい会を本当にありがとうございました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CSS Nite in OSAKA, Vol.35 に参加してきました</title>
    <link rel="alternate" href="http://re-dzine.net/2013/07/css-nite-in-osaka-vol35/"/>
    <id>http://re-dzine.net/2013/07/css-nite-in-osaka-vol35/</id>
    <published>2013-07-11T14:14:16Z</published>
    <updated>2013-10-28T16:12:29+09:00</updated>
    <author>
      <name>konitter</name>
    </author>
    <content type="html">&lt;p&gt;一昨日7/9(火)は、&lt;a href="http://osaka.cssnite.jp/vol35/"&gt;CSS Nite in OSAKA, Vol.35（復活スペシャル）&lt;/a&gt;に参加してきました。テーマは、「スマホアプリのデザインから プロトタイプ作成まで」。
実は「CSS Nite」と冠の付いたセミナーに参加するのはこれが初めて。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://osaka.cssnite.jp/vol35/"&gt;&lt;img src="http://osaka.cssnite.jp/vol35/images/banner_cnio35_220.jpg" alt="CSS Nite in OSAKA, Vol.35 復活スペシャル" width="220" height="220" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回スマホアプリがテーマということですが、普段のぼくの業務ではスマホアプリに関わることはまずありません。もしあったとしても、ぼくの広告代理店の発注側という立場としては、アプリのデザインやプロトタイプを作るのは発注先の会社でしょう。&lt;/p&gt;

&lt;p&gt;ではなぜ参加したか。今やこの業界はどこもかしこもアプリ、アプリ、アプリ。この分野では個人的にはもう完全に乗り遅れています。技術的な話は、ググるなり本を買うなりすれば手に入れられるものもあるんでしょうけど、普段アプリを作る人がどういうワークフローでどういう考え方を元に取り組んでいるかがどうもフワフワしててよくわからない。これが知りたかったんです。&lt;/p&gt;

&lt;p&gt;参加した結果。確かに今回聞いたお話は、登壇された秋葉さんご夫妻のやり方かもしれないけれど、なるほどこうやってやってるんだというのが何となくわかって良かったと思いました。&lt;/p&gt;

&lt;p&gt;レスポンシブだ、ワークフローがどうだ、ブラウザでデザインだ。分かってる人は分かってる。でもそうでない人はこれからの時代はこうしなきゃいけないんだ！みたいにねじ曲がって伝わってしまう。そうじゃなくてもっと柔軟に考えようよっていうのが、今回のテーマの根底にはあるように思います。&lt;/p&gt;

&lt;p&gt;秋葉さんご夫妻はお二人とも元々デザイナーということもあって、紙のデザイン（いわゆるカンプ）は大事。それはそれでちゃんと作る。だけど、特にアプリにおいては紙のデザインだけでは伝えられないものがある。それを補うためにプロトタイプを作るのだそう。&lt;/p&gt;

&lt;p&gt;そのプロトタイプは、HTML/CSS/JavaScriptで作る。JavaScriptを使うといってもゴリゴリにプログラムを組むのではなく、基本的にはclassの付け替えだけをさせる。それをトリガーにCSSを駆使して見せたい機能を実現する。&lt;/p&gt;

&lt;p&gt;そうするのは、例えばプロトタイプで作った機能をクライアントに説明する際に、何か意見があってもCSSの値を書き換えるだけでその場で瞬時に見せられるのが良いんだとのこと。色を変えたり、物体を動かしたり。これならぼくにもできそう。デモで実際にその様子をやっていただいてよく分かりました。&lt;/p&gt;

&lt;p&gt;で、そうしたプロトタイプを作る技術や経験が何に生きてくるのか。&lt;a href="http://www.mozilla.jp/firefoxos/"&gt;Firefox OS&lt;/a&gt;や&lt;a href="https://www.tizen.org/ja"&gt;Tizen&lt;/a&gt;などWebベースのOSを搭載したスマートフォンが出てきたときに役立ってくるわけです。そしてその動きはこれから加速していくそう。（ちなみに先日のTizen死亡説はデマ&lt;a href="http://www.gizmodo.jp/2013/07/tizenintel.html"&gt;[参考]&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;一方デザインにおいてデザイナーは、何らかの操作が成功した場合のデザインは作る。だけど、何かエラーが起きたときのことを考えていないのでは、と。例えば、検索結果が0件だったとき、スマホアプリで言えば、操作中に通信が切れたとき、など。そういうことも含めてデザイナーはデザインしていく必要があるし、デザインできるようにするためには、そういうことに対する普段からの理解が必要になってくる。&lt;/p&gt;

&lt;p&gt;時間の関係上、後半の方がだいぶ駆け足になってしまったのが少し残念ではあったものの、（夫婦だけに）お二人の軽快なやり取りの中で普段のお仕事の風景が目に浮かぶようで、非常にためになる会でした。&lt;/p&gt;

&lt;p&gt;次回の「in Osaka」はレスポンシブ周りがテーマになるそう。こちらもぜひ参加してみたいと思います。&lt;/p&gt;

&lt;p&gt;長くなってきたのでこれくらいで。
関係者のみなさん、どうもありがとうございました。&lt;/p&gt;
</content>
  </entry>
</feed>
